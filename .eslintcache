[{"C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\index.js":"1","C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\App.js":"2","C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\components\\Login\\Login.js":"3","C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\components\\MainHeader\\Navigation.js":"4","C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\components\\UI\\Button\\Button.js":"5","C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\components\\UI\\Card\\Card.js":"6","C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\components\\Home\\MainPage.js":"7","C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\components\\Sidebar.js":"8","C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\Pages\\Home.js":"9","C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\Pages\\Dashboard.js":"10","C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\Pages\\IssuedDocs.js":"11","C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\Pages\\SearchDocs.js":"12","C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\Pages\\MyProfile.js":"13","C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\Pages\\HomeCards\\CardDocs.js":"14","C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\Pages\\Table\\Thead.js":"15","C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\Pages\\Table\\Tbody.js":"16","C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\components\\AddForm\\AddForm.js":"17","C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\Pages\\Drive.js":"18","C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\components\\Modal.js":"19"},{"size":292,"mtime":1668406493697,"results":"20","hashOfConfig":"21"},{"size":990,"mtime":1668581172308,"results":"22","hashOfConfig":"21"},{"size":2518,"mtime":1669277599721,"results":"23","hashOfConfig":"21"},{"size":567,"mtime":1668594746337,"results":"24","hashOfConfig":"21"},{"size":353,"mtime":1648629846000,"results":"25","hashOfConfig":"21"},{"size":218,"mtime":1648629846000,"results":"26","hashOfConfig":"21"},{"size":1224,"mtime":1669355756423,"results":"27","hashOfConfig":"21"},{"size":5009,"mtime":1668581499180,"results":"28","hashOfConfig":"21"},{"size":1908,"mtime":1669276603226,"results":"29","hashOfConfig":"21"},{"size":6953,"mtime":1669375553492,"results":"30","hashOfConfig":"21"},{"size":1711,"mtime":1669289479347,"results":"31","hashOfConfig":"21"},{"size":111,"mtime":1669115644836,"results":"32","hashOfConfig":"21"},{"size":109,"mtime":1668753624491,"results":"33","hashOfConfig":"21"},{"size":2236,"mtime":1669351786992,"results":"34","hashOfConfig":"21"},{"size":918,"mtime":1668426436313,"results":"35","hashOfConfig":"21"},{"size":3132,"mtime":1669350887018,"results":"36","hashOfConfig":"21"},{"size":1415,"mtime":1668503935930,"results":"37","hashOfConfig":"21"},{"size":7369,"mtime":1669373496438,"results":"38","hashOfConfig":"21"},{"size":1118,"mtime":1669290163844,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"egy5qh",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\index.js",[],["83","84"],"C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\App.js",[],"C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\components\\Login\\Login.js",[],"C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\components\\MainHeader\\Navigation.js",[],"C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\components\\UI\\Button\\Button.js",[],"C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\components\\UI\\Card\\Card.js",[],"C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\components\\Home\\MainPage.js",[],"C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\components\\Sidebar.js",[],"C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\Pages\\Home.js",[],"C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\Pages\\Dashboard.js",["85"],"import React, { useState, useEffect } from 'react';\r\nimport './Drive.css';\r\nimport Multiselect from 'multiselect-react-dropdown';\r\nimport Card from '../components/UI/Card/Card';\r\n// import { ClassNames } from '@emotion/react';\r\n\r\nexport const Dashboard = () => {\r\n\r\n  const data = [\r\n    // 'Png', 'Jpg', 'Pdf'\r\n    { Country: 'Png', id: 1 },\r\n    { Country: 'Jpg', id: 2 },\r\n    { Country: 'Pdf', id: 3 }\r\n  ]\r\n  const [options] = useState(data);\r\n  const [enteredName, setEnteredName] = useState('')\r\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\r\n\r\n  const [selctedValue, setSelectedValue] = useState([]);\r\n  const [selectedValueTouched, setSelectedValueTouched] = useState(false);\r\n\r\n  const [enteredMin, setEnteredMin] = useState('100');\r\n  const [enteredMinTouched, setEnteredMinTouched] = useState(false);\r\n\r\n  const [enteredMax, setEnteredMax] = useState('2000');\r\n  const [enteredMaxTouched, setEnteredMaxTouched] = useState(false);\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  const enteredNameIsValid = enteredName.trim() !== '';\r\n  const enteredMinIsValid = enteredMin.trim() >= 100;\r\n  const enteredMaxIsValid = enteredMax.trim() <= 2000;\r\n  const selctedValueIsValid = selctedValue.length != 0;\r\n\r\n  const selectedInputIsValid = !selctedValueIsValid && selectedValueTouched;\r\n  const enteredInputIsValid = !enteredNameIsValid && enteredNameTouched;\r\n  const minInputIsValid = !enteredMinIsValid && enteredMinTouched;\r\n  const maxInputIsValid = !enteredMaxIsValid && enteredMaxTouched;\r\n\r\n\r\n  useEffect(() => {\r\n    if (enteredNameIsValid && enteredMinIsValid && enteredMaxIsValid && selctedValueIsValid) {\r\n      setFormIsValid(true);\r\n    }\r\n  }, [enteredNameIsValid, enteredMinIsValid, enteredMaxIsValid, selctedValueIsValid])\r\n\r\n  const nameInputHandler = (event) => {\r\n    setEnteredName(event.target.value);\r\n  }\r\n  const nameBlurHandler = () => {\r\n    setEnteredNameTouched(true);\r\n  }\r\n  const enteredMinBlurHandler = () => {\r\n    setEnteredMinTouched(true);\r\n  }\r\n  const enteredMaxBlurHandler = () => {\r\n    setEnteredMaxTouched(true);\r\n  }\r\n  const selectBlurHandler= ()=>{\r\n    setSelectedValueTouched(true);\r\n  }\r\n  const selectHandler = (event) => {\r\n    setSelectedValue(event);\r\n  }\r\n  const removeHandler = (event) => {\r\n    const idArray = event.map((e) => {\r\n      return e.id;\r\n    })\r\n    // setSelectedValue([]);\r\n    console.log(idArray);\r\n\r\n  }\r\n  const enteredMinInput = (event) => {\r\n    setEnteredMin(event.target.value);\r\n  }\r\n  const enteredMaxInput = (event) => {\r\n    setEnteredMax(event.target.value);\r\n  }\r\n\r\n  const documentSubmitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    setEnteredNameTouched(true);\r\n    setSelectedValueTouched(true);\r\n    setEnteredMaxTouched(true);\r\n    setEnteredMinTouched(true);\r\n\r\n    console.log(enteredName);\r\n    console.log(selctedValue);\r\n    console.log(enteredMin);\r\n    console.log(enteredMax);\r\n    console.log(enteredNameIsValid, enteredMinIsValid, enteredMaxIsValid, selctedValueIsValid);\r\n    if (!enteredNameIsValid && !enteredMinIsValid && !enteredMaxIsValid && !selctedValueIsValid) {\r\n      return;\r\n    }\r\n    // window.location.reload();\r\n\r\n    console.log(enteredInputIsValid, selectedInputIsValid, minInputIsValid, maxInputIsValid);\r\n\r\n    setEnteredName('');\r\n    setSelectedValue([]);\r\n    setEnteredMin('100');\r\n    setEnteredMax('2000');\r\n\r\n    setFormIsValid(false);\r\n\r\n    setEnteredMaxTouched(false);\r\n    setEnteredMinTouched(false);\r\n    setSelectedValueTouched(false);\r\n    setEnteredNameTouched(false);\r\n\r\n    console.log('form submitted');\r\n\r\n  }\r\n\r\n  const nameInputClasses = !enteredInputIsValid ? 'form-label is-invalid' : 'form-label';\r\n  const minInputClasses = !minInputIsValid ? 'form-label is-invalid' : 'form-label';\r\n  const maxInputClasses = !maxInputIsValid ? 'form-label is-invalid' : 'form-label';\r\n  const selectedInputClasses = !selectedInputIsValid ? 'form-label is-invalid' : 'form-label';\r\n\r\n\r\n  return (\r\n    <div className='container1' style={{ maxWidth: '100rem' }}>\r\n      <Card className=\"card-container\">\r\n        <form onSubmit={documentSubmitHandler}>\r\n          <div className=\"mb-3\">\r\n            <label htmlFor=\"DocsName\" className={nameInputClasses}>Document Name</label>\r\n            <input\r\n              name='docsname'\r\n              onChange={nameInputHandler}\r\n              onBlur={nameBlurHandler}\r\n\r\n              value={enteredName} type=\"text\"\r\n              className='form-control' id=\"DocsName\" aria-describedby=\"emailHelp\" />\r\n            {enteredInputIsValid &&\r\n              (<p className='error-text'>Not valid</p>\r\n              )}\r\n          </div>\r\n          <div className='mb-3'>\r\n            <label htmlFor=\"DocsFormat\" className={selectedInputClasses}>Document Name</label>\r\n            <Multiselect\r\n              name='formatSelect'\r\n              // isObject={false}\r\n              // onRemove={(event) => { console.log(event) }}\r\n              onRemove={removeHandler}\r\n              // onSelect={(event) => { console.log(event) }}\r\n              value={selctedValue}\r\n              onSelect={selectHandler}\r\n              onBlur={selectBlurHandler}\r\n              // onChange={selectHandler}\r\n              options={options}\r\n              showCheckbox\r\n              id='DocsFormat' displayValue='Country'\r\n            />\r\n            {selectedInputIsValid &&\r\n              (<p className='error-text'>Not valid</p>\r\n              )}\r\n          </div>\r\n\r\n          <div className='row g-3 my-3'>\r\n            <div className=\"col-md-6\">\r\n              <label htmlFor=\"firstName\" className={minInputClasses}>Min-size</label>\r\n              <input\r\n                name='minval'\r\n                onChange={enteredMinInput}\r\n                onBlur={enteredMinBlurHandler}\r\n                value={enteredMin}\r\n                type=\"number\"\r\n                className='form-control'\r\n                min='100' id=\"firstName\" placeholder=\"\" />\r\n              {minInputIsValid &&\r\n                (<p className='error-text'>Min Value is not Valid</p>\r\n                )}\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <label htmlFor=\"firstName\" className={maxInputClasses}>Max-size</label>\r\n              <input\r\n                name='maxval'\r\n                onChange={enteredMaxInput}\r\n                onBlur={enteredMaxBlurHandler}\r\n                value={enteredMax}\r\n                type=\"number\"\r\n                className='form-control'\r\n                id=\"firstName\" max='2000' placeholder=\"\" />\r\n              {maxInputIsValid && (<p className='error-text'>Max value is not valid</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <button\r\n            disabled={!formIsValid}\r\n            type=\"submit\"\r\n            className=\"btn btn-primary py-2 px-3\"\r\n            style={{ backgroundColor: '#0a4362' }}>Submit</button>\r\n        </form>\r\n      </Card>\r\n    </div >\r\n  )\r\n}\r\n","C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\Pages\\IssuedDocs.js",[],"C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\Pages\\SearchDocs.js",[],"C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\Pages\\MyProfile.js",[],"C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\Pages\\HomeCards\\CardDocs.js",[],"C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\Pages\\Table\\Thead.js",[],"C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\Pages\\Table\\Tbody.js",["86","87"],"import React from 'react';\r\nimport '../Issued.css';\r\n// import { FaDownload, FaTrash, FaEdit, FaEye, } from 'react-icons/fa';\r\nimport { Modal } from '../../components/Modal';\r\n\r\n\r\nexport const Tbody = (props) => {\r\n\r\n    const tableAction = props.action.map((docIcon) => (\r\n            <button type=\"button\" className=\"btn\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">\r\n                {docIcon}\r\n                <Modal />\r\n            </button>\r\n    ))\r\n\r\n    return (\r\n        <React.Fragment>\r\n            \r\n            <tr>\r\n                <td>\r\n                    <div className=\"form-check font-size-16\">\r\n                        <input className=\"form-check-input\" type=\"checkbox\" id=\"transactionCheck02\" />\r\n                        <label className=\"form-check-label\" for=\"transactionCheck02\"></label>\r\n                    </div>\r\n                </td>\r\n                <td><a href=\"javascript: void(0);\" className=\"text-body fw-bold\">{props.name}</a> </td>\r\n                <td>{props.type}</td>\r\n                <td>{props.size}</td>\r\n                <td>{props.createdOn}</td>\r\n                <td><span className=\"\">{props.updatedOn}</span></td>\r\n                <td>{tableAction}</td>\r\n            </tr>\r\n            {/* <tr>\r\n                    <td>\r\n                        <div className=\"form-check font-size-16\">\r\n                            <input className=\"form-check-input\" type=\"checkbox\" id=\"transactionCheck02\" />\r\n                            <label className=\"form-check-label\" for=\"transactionCheck02\"></label>\r\n                        </div>\r\n                    </td>\r\n                    <td><a href=\"javascript: void(0);\" className=\"text-body fw-bold\">Aadhar card</a> </td>\r\n                    <td>Neal Matthews</td>\r\n                    <td>55kb\r\n                    </td>\r\n                    <td>\r\n                        07 Oct, 2019\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"\">08 Oct, 2020</span>\r\n                    </td>\r\n\r\n                    <td>\r\n                        \r\n                        <button type=\"button\" className=\"btn\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">\r\n                            <FaTrash />\r\n                            <Modal/>\r\n                        </button>\r\n                        <button type=\"button\" className=\"btn\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">\r\n                            <FaEdit/>\r\n                            <Modal/>\r\n                        </button>\r\n                        <button type=\"button\" className=\"btn\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">\r\n                            <FaDownload/>\r\n                            <Modal/>\r\n                        </button>\r\n                        <button type=\"button\" className=\"btn\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">\r\n                            <FaEye/>\r\n                            <Modal/>\r\n                        </button>\r\n\r\n                    </td>\r\n                </tr>\r\n                 */}\r\n           \r\n        </React.Fragment >\r\n    )\r\n}\r\n","C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\components\\AddForm\\AddForm.js",[],["88","89"],"C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\Pages\\Drive.js",["90","91"],"import React, { useState, useEffect } from 'react';\r\nimport './Drive.css';\r\nimport Multiselect from 'multiselect-react-dropdown';\r\nimport Card from '../components/UI/Card/Card';\r\n\r\nexport const Drive = (props) => {\r\n    const data = [\r\n        // 'Png', 'Jpg', 'Pdf'\r\n        { Country: 'Png', id: 1 },\r\n        { Country: 'Jpg', id: 2 },\r\n        { Country: 'Pdf', id: 3 }\r\n    ]\r\n    const [options] = useState(data);\r\n    const [selctedValue, setSelectedValue] = useState([]);\r\n    // const [selectedValueTouched, setSelectedValueTouched] = useState(false);\r\n\r\n    const [enteredName, setEnteredName] = useState('');\r\n    const [enteredNameTouched, setEnteredNameTouched] = useState(false);\r\n\r\n    const [enteredMin, setEnteredMin] = useState('100');\r\n    const [enteredMinTouched, setEnteredMinTouched] = useState(false);\r\n\r\n    const [enteredMax, setEnteredMax] = useState('2000');\r\n    const [enteredMaxTouched, setEnteredMaxTouched] = useState(false);\r\n    const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n    const enteredNameIsValid = enteredName.trim() !== '';\r\n    const enteredMinIsValid = enteredMin.trim() >= 100;\r\n    const enteredMaxIsValid = enteredMax.trim() <= 2000;\r\n\r\n    const nameInputIsValid = !enteredNameIsValid && enteredNameTouched;\r\n    const minInputIsValid = !enteredMinIsValid && enteredMinTouched;\r\n    const maxInputIsValid = !enteredMaxIsValid && enteredMaxTouched;\r\n\r\n    useEffect(() => {\r\n        if (nameInputIsValid && minInputIsValid && maxInputIsValid ) {\r\n            setFormIsValid(true);\r\n        }\r\n        \r\n    }, [nameInputIsValid, minInputIsValid, maxInputIsValid ])\r\n\r\n    const selectHandler = (event) => {\r\n        const value= setSelectedValue(event);\r\n        // console.log(event);\r\n        if(value !== ''){\r\n            // setSelectedValueTouched(true);\r\n            console.log('yes it is correct'); \r\n        }\r\n    }\r\n    const removeHandler =(event)=>{\r\n        console.log(event);\r\n    }\r\n    const selectBlurHandler = () => {\r\n        // setSelectedValueTouched(true);   \r\n    }\r\n    const nameInputHandler = (event) => {\r\n        setEnteredName(event.target.value);\r\n        // console.log(event);\r\n    }\r\n    const nameBlurHandler = () => {\r\n        setEnteredNameTouched(true);\r\n    }\r\n    const enteredMinInput = (event) => {\r\n        setEnteredMin(event.target.value);\r\n    }\r\n    const enteredMinBlurHandler = () => {\r\n        setEnteredMinTouched(true);\r\n    }\r\n    const enteredMaxInput = (event) => {\r\n        setEnteredMax(event.target.value);\r\n    }\r\n    const enteredMaxBlurHandler = () => {\r\n        setEnteredMaxTouched(true);\r\n    }\r\n    const documentSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        setEnteredNameTouched(true);\r\n        setEnteredMinTouched(true);\r\n        setEnteredMaxTouched(true);\r\n        // console.log(nameInputIsValid, minInputIsValid, maxInputIsValid);\r\n\r\n        if (!enteredNameIsValid && !enteredMinIsValid && !enteredMaxIsValid ) {\r\n            return;\r\n        }\r\n\r\n        setEnteredName('');\r\n        setEnteredMin('100');\r\n        setEnteredMax('2000');\r\n\r\n        setEnteredNameTouched(false);\r\n        setEnteredMinTouched(false);\r\n        setEnteredMaxTouched(false);\r\n        // setSelectedValueTouched(false);\r\n\r\n        console.log('form submitted');\r\n        console.log(selctedValue, enteredName, enteredMax, enteredMin);\r\n    }\r\n\r\n    const nameInputClasses = !nameInputIsValid ? 'form-control is-invalid' : 'form-control';\r\n    const minInputClasses = !minInputIsValid ? 'form-control is-invalid' : 'form-control';\r\n    const maxInputClasses = !maxInputIsValid ? 'form-control is-invalid' : 'form-control';\r\n\r\n    return (\r\n        <div className='container1' style={{ maxWidth: '100rem' }}>\r\n            <Card className=\"card-container\">\r\n                <form onSubmit={documentSubmitHandler}>\r\n                    <div className=\"mb-3\">\r\n                        <label htmlFor=\"DocsName\" className=\"form-label \">Document Name</label>\r\n                        <input\r\n                            name='docsname'\r\n                            onChange={nameInputHandler}\r\n                            onBlur={nameBlurHandler}\r\n\r\n                            value={enteredName} type=\"text\"\r\n                            className={nameInputClasses} id=\"DocsName\" aria-describedby=\"emailHelp\" />\r\n                        {nameInputIsValid &&\r\n                            (<p className='error-text'>Not valid</p>\r\n                            )}\r\n                    </div>\r\n                    <div className='mb-3'>\r\n                        <label htmlFor=\"DocsFormat\" className=\"form-label\">Document Name</label>\r\n                        <Multiselect\r\n                            name='formatSelect'\r\n                            // isObject={false}\r\n                            // onRemove={(event) => { console.log(event) }}\r\n                            onRemove={removeHandler}\r\n                            // onSelect={(event) => { console.log(event) }}\r\n                            onSelect={selectHandler}\r\n                            // onChange={selectHandler}\r\n                            // onBlur={selectBlurHandler}\r\n                            options={options}\r\n                            showCheckbox\r\n                            id='DocsFormat' displayValue='Country'\r\n                        />\r\n                    </div>\r\n\r\n                    <div className='row g-3 my-3'>\r\n                        <div className=\"col-md-6\">\r\n                            <label htmlFor=\"firstName\" className=\"form-label\">Min-size</label>\r\n                            <input\r\n                                name='minval'\r\n                                onChange={enteredMinInput}\r\n                                onBlur={enteredMinBlurHandler}\r\n                                value={enteredMin}\r\n                                type=\"number\"\r\n                                className={minInputClasses}\r\n                                min='100' id=\"firstName\" placeholder=\"\" />\r\n                            {minInputIsValid &&\r\n                                (<p className='error-text'>Min Value is not Valid</p>\r\n                                )}\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <label htmlFor=\"firstName\" className=\"form-label\">Max-size</label>\r\n                            <input\r\n                                name='maxval'\r\n                                onChange={enteredMaxInput}\r\n                                onBlur={enteredMaxBlurHandler}\r\n                                value={enteredMax}\r\n                                type=\"number\"\r\n                                className={maxInputClasses}\r\n                                id=\"firstName\" max='2000' placeholder=\"\" />\r\n                            {maxInputIsValid && (<p className='error-text'>Max value is not valid</p>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    <button\r\n                        // disabled={!formIsValid} \r\n                        type=\"submit\"\r\n                        className=\"btn btn-primary py-2 px-3\"\r\n                        style={{ backgroundColor: '#0a4362' }}>Submit</button>\r\n                </form>\r\n            </Card>\r\n        </div >\r\n    )\r\n}\r\n","C:\\xampp\\htdocs\\react-tut\\DocMS\\src\\components\\Modal.js",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":32,"column":51,"nodeType":"98","messageId":"99","endLine":32,"endColumn":53},{"ruleId":"100","severity":1,"message":"101","line":26,"column":21,"nodeType":"102","endLine":26,"endColumn":82},{"ruleId":"103","severity":1,"message":"104","line":26,"column":29,"nodeType":"105","messageId":"106","endLine":26,"endColumn":51},{"ruleId":"92","replacedBy":"107"},{"ruleId":"94","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":25,"column":12,"nodeType":"111","messageId":"112","endLine":25,"endColumn":23},{"ruleId":"109","severity":1,"message":"113","line":53,"column":11,"nodeType":"111","messageId":"112","endLine":53,"endColumn":28},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL",["114"],["115"],"no-unused-vars","'formIsValid' is assigned a value but never used.","Identifier","unusedVar","'selectBlurHandler' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]